# Makefile for RepoForge - Easy Command Execution
# Run 'make help' to see all available commands

.PHONY: help install setup update clean test build deploy docker-up docker-down

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Default target
.DEFAULT_GOAL := help

# Project variables
PROJECT_NAME ?= my-project
PROJECT_TYPE ?= api
LANGUAGE ?= typescript
FRAMEWORK ?= express
FEATURES ?= auth,database,api

# Environment detection
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
    OPEN_CMD := xdg-open
endif
ifeq ($(UNAME_S),Darwin)
    OPEN_CMD := open
endif

# Check for required tools
HAS_NODE := $(shell command -v node 2> /dev/null)
HAS_NPM := $(shell command -v npm 2> /dev/null)
HAS_GIT := $(shell command -v git 2> /dev/null)
HAS_DOCKER := $(shell command -v docker 2> /dev/null)
HAS_REPOFORGE := $(shell command -v repoforge 2> /dev/null)

#############################
# Help and Documentation
#############################

help: ## Show this help message
	@echo "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(BLUE)║                   RepoForge Make Commands                    ║$(NC)"
	@echo "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)Usage:$(NC)"
	@echo "  make [command] [ARGS...]"
	@echo ""
	@echo "$(YELLOW)Available Commands:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Examples:$(NC)"
	@echo "  make install                    # Install RepoForge"
	@echo "  make new PROJECT_NAME=my-api   # Create new project"
	@echo "  make docker-up                  # Start Docker environment"
	@echo ""

#############################
# Installation Commands
#############################

check-deps: ## Check system dependencies
	@echo "$(BLUE)Checking system dependencies...$(NC)"
ifndef HAS_NODE
	@echo "$(RED)✗ Node.js not found - please install Node.js 18+$(NC)"
	@exit 1
else
	@echo "$(GREEN)✓ Node.js found$(NC)"
endif
ifndef HAS_NPM
	@echo "$(RED)✗ npm not found$(NC)"
	@exit 1
else
	@echo "$(GREEN)✓ npm found$(NC)"
endif
ifndef HAS_GIT
	@echo "$(RED)✗ Git not found - please install Git$(NC)"
	@exit 1
else
	@echo "$(GREEN)✓ Git found$(NC)"
endif
	@echo "$(GREEN)All dependencies satisfied!$(NC)"

install: check-deps ## Install RepoForge CLI globally
	@echo "$(BLUE)Installing RepoForge CLI...$(NC)"
	@npm install -g repoforge-cli
	@echo "$(GREEN)✓ RepoForge installed successfully!$(NC)"
	@echo "Run 'make setup' to complete configuration"

setup: ## Run interactive setup wizard
	@echo "$(BLUE)Running RepoForge setup...$(NC)"
	@bash setup-repoforge.sh
	@echo "$(GREEN)✓ Setup complete!$(NC)"

update: ## Update RepoForge to latest version
	@echo "$(BLUE)Updating RepoForge...$(NC)"
ifdef HAS_REPOFORGE
	@npm update -g repoforge-cli
	@cd ~/.repoforge/standards && git pull
	@echo "$(GREEN)✓ RepoForge updated!$(NC)"
else
	@echo "$(RED)RepoForge not installed. Run 'make install' first$(NC)"
endif

uninstall: ## Uninstall RepoForge
	@echo "$(YELLOW)Uninstalling RepoForge...$(NC)"
	@npm uninstall -g repoforge-cli
	@rm -rf ~/.repoforge
	@echo "$(GREEN)✓ RepoForge uninstalled$(NC)"

#############################
# Project Generation
#############################

new: ## Create new project (use PROJECT_NAME=name)
	@echo "$(BLUE)Creating new project: $(PROJECT_NAME)$(NC)"
ifdef HAS_REPOFORGE
	@repoforge init \
		--name "$(PROJECT_NAME)" \
		--type "$(PROJECT_TYPE)" \
		--language "$(LANGUAGE)" \
		--framework "$(FRAMEWORK)" \
		--features "$(FEATURES)" \
		--yes
	@echo "$(GREEN)✓ Project created: $(PROJECT_NAME)$(NC)"
else
	@echo "$(RED)RepoForge not installed. Run 'make install' first$(NC)"
endif

interactive: ## Create project with interactive prompts
	@echo "$(BLUE)Starting interactive project creation...$(NC)"
ifdef HAS_REPOFORGE
	@repoforge init
else
	@echo "$(RED)RepoForge not installed. Run 'make install' first$(NC)"
endif

web: ## Create web application
	@$(MAKE) new PROJECT_TYPE=web FRAMEWORK=react

api: ## Create API service
	@$(MAKE) new PROJECT_TYPE=api FRAMEWORK=express

microservice: ## Create microservice
	@$(MAKE) new PROJECT_TYPE=microservice LANGUAGE=go

cli: ## Create CLI tool
	@$(MAKE) new PROJECT_TYPE=cli FRAMEWORK=commander

#############################
# Project Management
#############################

validate: ## Validate current project
	@echo "$(BLUE)Validating project...$(NC)"
ifdef HAS_REPOFORGE
	@repoforge validate .
	@echo "$(GREEN)✓ Validation complete$(NC)"
else
	@echo "$(RED)RepoForge not installed$(NC)"
endif

secure: ## Run security audit
	@echo "$(BLUE)Running security audit...$(NC)"
ifdef HAS_REPOFORGE
	@repoforge secure . --fix
	@echo "$(GREEN)✓ Security audit complete$(NC)"
else
	@echo "$(RED)RepoForge not installed$(NC)"
endif

test: ## Run project tests
	@echo "$(BLUE)Running tests...$(NC)"
	@if [ -f "package.json" ]; then \
		npm test; \
	elif [ -f "requirements.txt" ]; then \
		pytest; \
	elif [ -f "go.mod" ]; then \
		go test ./...; \
	else \
		echo "$(RED)No test configuration found$(NC)"; \
	fi

coverage: ## Run tests with coverage
	@echo "$(BLUE)Running tests with coverage...$(NC)"
	@if [ -f "package.json" ]; then \
		npm run test:coverage; \
	elif [ -f "requirements.txt" ]; then \
		pytest --cov; \
	elif [ -f "go.mod" ]; then \
		go test -cover ./...; \
	fi

lint: ## Run linting
	@echo "$(BLUE)Running linter...$(NC)"
	@if [ -f "package.json" ]; then \
		npm run lint; \
	elif [ -f "requirements.txt" ]; then \
		flake8 .; \
	elif [ -f "go.mod" ]; then \
		golangci-lint run; \
	fi

format: ## Format code
	@echo "$(BLUE)Formatting code...$(NC)"
	@if [ -f "package.json" ]; then \
		npm run format; \
	elif [ -f "requirements.txt" ]; then \
		black .; \
	elif [ -f "go.mod" ]; then \
		go fmt ./...; \
	fi

#############################
# Build and Deploy
#############################

build: ## Build project
	@echo "$(BLUE)Building project...$(NC)"
	@if [ -f "package.json" ]; then \
		npm run build; \
	elif [ -f "requirements.txt" ]; then \
		python setup.py build; \
	elif [ -f "go.mod" ]; then \
		go build -o bin/app ./...; \
	elif [ -f "Cargo.toml" ]; then \
		cargo build --release; \
	fi
	@echo "$(GREEN)✓ Build complete$(NC)"

deploy: ## Deploy to production
	@echo "$(BLUE)Deploying to production...$(NC)"
ifdef HAS_REPOFORGE
	@repoforge deploy --environment production
	@echo "$(GREEN)✓ Deployment complete$(NC)"
else
	@echo "$(RED)RepoForge not installed$(NC)"
endif

deploy-staging: ## Deploy to staging
	@echo "$(BLUE)Deploying to staging...$(NC)"
ifdef HAS_REPOFORGE
	@repoforge deploy --environment staging
	@echo "$(GREEN)✓ Staging deployment complete$(NC)"
else
	@echo "$(RED)RepoForge not installed$(NC)"
endif

#############################
# Docker Commands
#############################

docker-check: ## Check Docker installation
ifndef HAS_DOCKER
	@echo "$(RED)Docker not installed. Please install Docker first$(NC)"
	@exit 1
endif

docker-build: docker-check ## Build Docker images
	@echo "$(BLUE)Building Docker images...$(NC)"
	@docker-compose build
	@echo "$(GREEN)✓ Docker images built$(NC)"

docker-up: docker-check ## Start Docker environment
	@echo "$(BLUE)Starting Docker environment...$(NC)"
	@docker-compose up -d
	@echo "$(GREEN)✓ Docker environment started$(NC)"
	@echo "Services available at:"
	@echo "  - RepoForge CLI: docker exec -it repoforge-cli bash"
	@echo "  - Web UI: http://localhost:3001"
	@echo "  - API: http://localhost:3000"
	@echo "  - Grafana: http://localhost:3002"

docker-down: docker-check ## Stop Docker environment
	@echo "$(BLUE)Stopping Docker environment...$(NC)"
	@docker-compose down
	@echo "$(GREEN)✓ Docker environment stopped$(NC)"

docker-restart: docker-down docker-up ## Restart Docker environment

docker-logs: docker-check ## View Docker logs
	@docker-compose logs -f

docker-clean: docker-check ## Clean Docker volumes
	@echo "$(YELLOW)WARNING: This will delete all Docker volumes!$(NC)"
	@read -p "Continue? (y/N) " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		docker-compose down -v; \
		echo "$(GREEN)✓ Docker volumes cleaned$(NC)"; \
	fi

#############################
# Claude Integration
#############################

claude-review: ## Run Claude code review
	@echo "$(BLUE)Running Claude code review...$(NC)"
ifdef HAS_REPOFORGE
	@repoforge claude review .
else
	@echo "$(RED)RepoForge not installed$(NC)"
endif

claude-generate: ## Generate code with Claude
	@echo "$(BLUE)Generating code with Claude...$(NC)"
ifdef HAS_REPOFORGE
	@repoforge claude generate component --name $(COMPONENT_NAME)
else
	@echo "$(RED)RepoForge not installed$(NC)"
endif

claude-refactor: ## Refactor code with Claude
	@echo "$(BLUE)Refactoring code with Claude...$(NC)"
ifdef HAS_REPOFORGE
	@repoforge claude refactor ./src --optimize
else
	@echo "$(RED)RepoForge not installed$(NC)"
endif

#############################
# Standards Management
#############################

standards-update: ## Update standards repository
	@echo "$(BLUE)Updating standards...$(NC)"
	@cd ~/.repoforge/standards && git pull
	@echo "$(GREEN)✓ Standards updated$(NC)"

standards-apply: ## Apply standards to project
	@echo "$(BLUE)Applying standards...$(NC)"
ifdef HAS_REPOFORGE
	@repoforge standards apply . --fix
	@echo "$(GREEN)✓ Standards applied$(NC)"
else
	@echo "$(RED)RepoForge not installed$(NC)"
endif

standards-check: ## Check standards compliance
	@echo "$(BLUE)Checking standards compliance...$(NC)"
ifdef HAS_REPOFORGE
	@repoforge standards check
else
	@echo "$(RED)RepoForge not installed$(NC)"
endif

#############################
# Utility Commands
#############################

clean: ## Clean build artifacts and temp files
	@echo "$(BLUE)Cleaning project...$(NC)"
	@rm -rf node_modules dist build coverage .next .cache
	@rm -rf __pycache__ *.pyc .pytest_cache .coverage htmlcov
	@rm -rf vendor bin pkg
	@rm -rf target Cargo.lock
	@find . -name "*.log" -delete
	@find . -name ".DS_Store" -delete
	@echo "$(GREEN)✓ Project cleaned$(NC)"

reset: clean ## Reset project to clean state
	@echo "$(YELLOW)Resetting project...$(NC)"
	@git clean -fdx
	@git reset --hard HEAD
	@echo "$(GREEN)✓ Project reset$(NC)"

backup: ## Backup current project
	@echo "$(BLUE)Creating backup...$(NC)"
	@tar -czf "../$(shell basename $(CURDIR))-backup-$(shell date +%Y%m%d-%H%M%S).tar.gz" .
	@echo "$(GREEN)✓ Backup created$(NC)"

doctor: ## Run diagnostics
	@echo "$(BLUE)Running diagnostics...$(NC)"
ifdef HAS_REPOFORGE
	@repoforge doctor --fix
	@echo "$(GREEN)✓ Diagnostics complete$(NC)"
else
	@echo "$(RED)RepoForge not installed$(NC)"
endif

info: ## Show project information
	@echo "$(BLUE)Project Information:$(NC)"
	@echo "  Name: $(shell basename $(CURDIR))"
	@echo "  Path: $(CURDIR)"
	@if [ -f "package.json" ]; then \
		echo "  Type: Node.js"; \
		echo "  Version: $$(node -p "require('./package.json').version")"; \
	elif [ -f "requirements.txt" ]; then \
		echo "  Type: Python"; \
	elif [ -f "go.mod" ]; then \
		echo "  Type: Go"; \
		echo "  Module: $$(grep '^module' go.mod | cut -d' ' -f2)"; \
	fi
	@echo ""
	@echo "$(BLUE)Environment:$(NC)"
	@echo "  Node: $$(node -v 2>/dev/null || echo 'not installed')"
	@echo "  npm: $$(npm -v 2>/dev/null || echo 'not installed')"
	@echo "  Python: $$(python --version 2>/dev/null || echo 'not installed')"
	@echo "  Go: $$(go version 2>/dev/null || echo 'not installed')"
	@echo "  Docker: $$(docker --version 2>/dev/null || echo 'not installed')"
	@echo "  RepoForge: $$(repoforge --version 2>/dev/null || echo 'not installed')"

open-docs: ## Open documentation in browser
	@echo "$(BLUE)Opening documentation...$(NC)"
	@$(OPEN_CMD) https://docs.repoforge.dev

open-ui: ## Open Web UI in browser
	@echo "$(BLUE)Opening Web UI...$(NC)"
	@$(OPEN_CMD) http://localhost:3001

#############################
# Development Shortcuts
#############################

dev: ## Start development server
	@echo "$(BLUE)Starting development server...$(NC)"
	@if [ -f "package.json" ]; then \
		npm run dev; \
	elif [ -f "requirements.txt" ]; then \
		python app.py; \
	elif [ -f "go.mod" ]; then \
		go run ./...; \
	fi

watch: ## Start in watch mode
	@echo "$(BLUE)Starting watch mode...$(NC)"
	@if [ -f "package.json" ]; then \
		npm run watch; \
	else \
		echo "$(RED)Watch mode not configured$(NC)"; \
	fi

logs: ## View application logs
	@echo "$(BLUE)Viewing logs...$(NC)"
	@tail -f logs/*.log 2>/dev/null || echo "$(YELLOW)No logs found$(NC)"

#############################
# Batch Operations
#############################

all: install setup new test build deploy ## Run complete workflow

ci: lint test build ## Run CI pipeline locally

daily: standards-update validate secure test ## Daily maintenance tasks

weekly: daily coverage docker-build ## Weekly maintenance tasks

.SILENT: help info